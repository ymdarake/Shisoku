name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --run

      - name: Generate coverage markdown
        run: npm run coverage:md

      - name: Upload HTML coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage

      - name: Upload coverage markdown as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-md
          path: code-coverage-results.md

  comment-coverage:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Download coverage markdown
        uses: actions/download-artifact@v4
        with:
          name: coverage-md
          path: .

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'code-coverage-results.md';
            const body = fs.readFileSync(path, 'utf8');
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            // Upsert comment by marker
            const marker = '<!-- coverage-report -->';
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const prev = comments.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (prev) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: prev.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
